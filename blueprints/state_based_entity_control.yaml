blueprint:
  name: State Based Entity Control
  description: Change the target entity to desired entity state base on the trigger entity's state, illuminance sensor's state, Sun elevation and so on.
  domain: automation
  input:
    trigger_condition_on:
      name: Trigger Conditions
      description: These will trigger the automation.
      selector:
        condition:
    trigger_condition_off:
      name: (Optional) Trigger Condition - Off
      description: >-
        When these conditions are met,
        try to change the target entity's state to desired state with target 
        entity's turn off action (defined below). 
        If this value is left empty, then any states that is not "Trigger Entity States"
        defined above will trigger the turn off action. 
        This value supports regular expression, 
        i.e. you can list multiple values as "state_1|state_2|state_3".
      default:
      selector:
        condition:
    target_entity:
      name: Target Entity
      description: Any entity that can be operated with below action.
      selector:
        entity:
    target_conditions_on:
      name: (Optional) Target Entity Desired State
      description: >-
        When the target entity state is of this value, 
        the target entity is considered turned on. 
        When this value is set to 'none', the automation 
        will be triggered only based on trigger entity's state,
        which means target entity won't be turned off if it's
        manually turned on.
        This value supports regular expression, 
        i.e. you can list multiple values as "state_1|state_2|state_3".
      default:
      selector:
        condition:
    target_conditions_off:
      name: (Optional) Turn Off Target Entity
      description: >-
        If set, instead of the original "Target Entity", this entity will be 
        turned off with the "Turn off action" defined below.
        This is usually helpful when the "Target Entity" is a scene. Then here
        you want to put another scene to revert the applied scene.
      default:
      selector:
        entity:
    target_entity_action_on:
      name: (Optional) Target Entity Turn On Action
      description: >-
        Action that will change target entity's state to desired state.
        If this value is left empty, it will default to "homeassistant.turn_on".
      default:
        - service: homeassistant.turn_on
          target:
            entity_id: scene.watching_movies
      selector:
        action:
    target_entity_action_off:
      name: (Optional) Target Entity Turn Off Action
      description: >-
        Action that will change target entity's state away from desired state. 
        It doesn't necessary have to set the entity's state to 'off', 
        as long as it's not the desired state it will be fine.
        If this value is left empty, it will default to "homeassistant.turn_off".
      default:
        - service: homeassistant.turn_off
          target:
            entity_id: scene.watching_movies
      selector:
        text:
    illuminance_sensor:
      name: (Optional) Illuminance Sensor
      description: This sensor will be used to determine the illumination.
      default:
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    illuminance_below:
      name: (Optional) Illuminance Below
      description: >-
        Target entity will be "turned on" when "trigger entity" is at 
        expected state and the illumination sensor returned a value that 
        is below this value.
        If left empty, illuminace sensor will not be applied.
      default:
      selector:
        number:
          min: 0
          max: 100000
          unit_of_measurement: "lm"
          mode: box
    sun_elevation_below:
      name: (Optional) Sun Elevation Below
      description: >-
        Target entity will be turned on when "trigger entity" is at expected 
        state and Sun elevation is below this value. Sun elevation ranges 
        from -90 to 90 degree. Only applied when this value is set.
        If left empty, this option will not be applied.
      default:
      selector:
        number:
          min: -90
          max: 90
          unit_of_measurement: "Â°"
    trigger_timeout:
      name: (Optional) Trigger Timeout.
      description: >-
        After "trigger entity" is no longer at "trigger entity state" for 
        this time (in seconds), "turn off" the target entity.
        You can also put the time as "HH:MM:SS". i.e. "01:02:03" means 
        one hour two mintues three seconds.
        If left empty, by default this will be 30 seconds.
      default: "00:00:30"
      selector:
        duration:
    alt_trigger_timeouts:
      name: (OPTIONAL) Alternate Trigger Timeout
      description: >-
        Alternate trigger timeout values to use besides the main trigger 
        timeout.
        Follow format 
        "alternate_time_start_1-alternate_time_end_1,timeout_1;
        alternate_time_start_2-alternate_time_end_2,timeout_2;more times"
        Use "HH:MM:SS" for "alternate_time_start" and "alternate_time_end".
        Time ranges must not overlap.
        Timeout can either be a number (meaning timeout in seconds), or
        "HH:MM:SS" value.
        e.g.
        "17:00:00-19:30:00,30;19:30:00-20:00:00,00:20:00;23:00:00-1:00:00,60" means from 17:00:00 to 19:30:00,
        use 30 seconds as timeout; from 19:30:00 to 20:00:00, use 20 minutes as timeout; 
        from 23:00:00 to 1:00:00, use 60 seconds as timeout.
      default:
      selector:
        text:
    execution_time_ranges:
      name: (OPTIONAL) Execution Time Ranges
      description: >-
        Time ranges when this automation will be executed. If specified, this automation
        will only execute when current time is within any given time range.
        Follow format 
        "time_start_1-time_end_1;time_start_2-time_end_2;more times.."
        Use "HH:MM:SS" for "time_start" and "time_end".
        Time ranges must not overlap.
        e.g.
        "17:00:00-19:00:00;19:30:00-20:00:00" means this automation will be enabled
        from 17:00:00 to 19:00:00 and from 19:30:00 to 20:00:00 everyday.
      default:
      selector:
        text:

mode: restart

variables:
  _target_entity: !input target_entity
  target_entity: "{{ _target_entity or '' }}"
  _target_entity_off: !input target_entity_off
  target_entity_off: "{{ _target_entity_off | default(target_entity, true) | trim }}"
  _target_entity_state: !input target_entity_state
  target_entity_state: >-
      {% set st = _target_entity_state or '' | trim %}
      {% if st != 'none' and not target_entity | regex_match('^(scene|script)\..+', ignorecase=true) %}
        {{ st }}
      {% endif %}
  _target_entity_action_on: !input target_entity_action_on
  target_entity_action_on: "{{ _target_entity_action_on | default('homeassistant.turn_on', true) | trim }}"
  _target_entity_action_off: !input target_entity_action_off
  target_entity_action_off: "{{ _target_entity_action_off | default('homeassistant.turn_off', true) | trim }}"
  _trigger_entity: !input trigger_entity
  trigger_entity: "{{ _trigger_entity or '' }}"
  _trigger_entity_state: !input trigger_entity_state
  trigger_entity_state: "{{ _trigger_entity_state | default('on', true) | trim }}"
  _trigger_entity_state_off: !input trigger_entity_state_off
  trigger_entity_state_off: "{{ _trigger_entity_state_off | default('', true) | trim }}"
  _trigger_timeout: !input trigger_timeout
  illuminance_sensor: !input illuminance_sensor
  illuminance_below: !input illuminance_below
  blocker_entity: !input blocker_entity
  _blocker_entity_state: !input blocker_entity_state
  blocker_entity_state: "{{ (_blocker_entity_state or '') | trim }}"
  timeout_blocker_entity: !input timeout_blocker_entity
  _timeout_blocker_entity_state: !input timeout_blocker_entity_state
  timeout_blocker_entity_state: "{{ (_timeout_blocker_entity_state or '') | trim }}"
  _alt_trigger_timeouts: !input alt_trigger_timeouts
  _alt_trigger_timeout: >-
      {% set _alt_trigger_timeouts = _alt_trigger_timeouts | replace(' ', '') %}
      {% set current_time = now().strftime("%H:%M:%S") %}
      {% for alt in (_alt_trigger_timeouts or '').split(';') if alt %}
        {% set val = alt.split(',') %}
        {% if val | length == 2 and val[0] %}
          {% set t = val[0].split('-') %}
          {% if t | length == 2 %}
            {% if t[0] == t[1] or
                  (t[0] < t[1] and t[0] <= current_time and current_time <= t[1]) or
                  (t[0] > t[1] and (current_time >= t[0] or current_time <= t[1]))
            %}
              {{ val[1] | default(0, true) }}
            {% endif %}
          {% endif %}
        {% endif %}
      {% endfor %}
  trigger_timeout: >-
      {% set _alt_trigger_timeout = _alt_trigger_timeout | replace(' ', '') %}
      {% set _trigger_timeout = _trigger_timeout | replace(' ', '') %}
      {% if _alt_trigger_timeout or _alt_trigger_timeout == 0 %}
        {{ _alt_trigger_timeout }}
      {% elif _trigger_timeout or _trigger_timeout == 0 %}
        {{ _trigger_timeout }}
      {% else %}
        {{ 30 }}
      {% endif %}
  _execution_time_ranges: !input execution_time_ranges
  execution_time_ranges: "{{ (_execution_time_ranges or '') | replace(' ', '') }}"
  execution_time_range_matched: >-
      {% set current_time = now().strftime("%H:%M:%S") %}
      {% for val in (execution_time_ranges or '').split(';') if val -%}
        {% set t = val.split('-') %}
        {% if t | length == 2 -%}
          {% if t[0] == t[1] or
                (t[0] < t[1] and t[0] <= current_time and current_time <= t[1]) or
                (t[0] > t[1] and (current_time >= t[0] or current_time <= t[1]))
          -%}
            {{ val }}
          {%- endif %}
        {%- endif %}
      {%- endfor %}
  # At least one trigger entity should be available.
  trigger_entities_available: >-
      {% for e in trigger_entity.split(',') if e -%}
        {% if states(e) != 'unknown' and not is_state(e, 'unavailable') -%}
          {{ e }}:{{ states(e) }};
        {%- endif %}
      {%- endfor %}
  trigger_entities_matched: >-
      {% if trigger_entity_state %}
        {% for e in trigger_entity.split(',') if e -%}
          {% if (states(e) or '') | regex_match('^('+ trigger_entity_state +')$', ignorecase=true) -%}
            {{ e }}:{{ states(e) }};
          {%- endif %}
        {%- endfor %}
      {% endif %}
  trigger_entities_off_matched: >-
      {% if trigger_entity_state_off %}
        {% for e in trigger_entity.split(',') if e -%}
          {% if (states(e) or '') | regex_match('^('+ trigger_entity_state_off +')$', ignorecase=true) -%}
            {{ e }}:{{ states(e) }};
          {%- endif %}
        {%- endfor %}
      {% endif %}
  target_entities_matched: >-
      {% if target_entity_state %}
        {% for e in target_entity.split(',') if e -%}
          {% if (states(e) or '') | regex_match('^('+ target_entity_state +')$', ignorecase=true) -%}
            {{ e }}:{{ states(e) }};
          {%- endif %}
        {%- endfor %}
      {% endif %}
  triggered_entity: >-
      {% if trigger and trigger.platform == 'state' %}
        {% for e in trigger_entity.split(',') if e -%}
          {% if e == trigger.entity_id -%}
            {{ e }}
          {%- endif %}
        {%- endfor %}
      {% endif %}
  sun_elevation_below: !input sun_elevation_below
  
trigger:
  - platform: event
    # Check immediately after the automation is changed.
    event_type: automation_reloaded
  - platform: homeassistant
    # Check immediately after homeassistant is started.
    event: start
  - platform: state
    # Trigger on any state change of the motion sensor, so we make sure the delay in action will be restarted every time.
    entity_id: !input trigger_entity
  - platform: state
    # Trigger on any state change of the target, including manually turned on the target from switch/hass app.
    entity_id: !input target_entity
    # Prevent this automation from triggerring if the light was on and off immediately.
    for:
      seconds: 3

condition:
  - condition: template
    # Trigger entity (sensor) must be active. If it's not connected due to dead battery or connectivity issue, we shouldn't execute this automation.
    # Thus the target can still be operated manually.
    value_template: "{{ trigger_entities_available != '' }}"

action:
  - choose:
      - conditions:
          - condition: template
            # When execution_time_ranges is defined, but right now it's outside of execution time range.
            value_template: "{{ execution_time_ranges != '' and execution_time_range_matched == '' }}"
        sequence:
          - service: system_log.write
            data:
              message: "Skip executing service on {{ state_attr(target_entity, 'friendly_name') }} since it's outside of execution time range."
              level: info
      - conditions:
          - condition: template
            # This prevent the rule from turning on target entity that is turned off manually from UI/App or from physical switch, even though the trigger entity's state is not cleared.
            value_template: "{{ not trigger or triggered_entity != '' }}"
          - condition: template
            value_template: "{{ (sun_elevation_below | int(-9999) == -9999 and not illuminance_sensor) or (illuminance_sensor and states(illuminance_sensor) | int(99999) <= illuminance_below | int(-1)) or ((sun_elevation_below or sun_elevation_below == 0) and state_attr('sun.sun', 'elevation') | int(91) <= sun_elevation_below | int(-91)) }}"
          - condition: template
            # When target_entity_state is not set, or target entity is not "on".
            value_template: "{{ target_entity_state == '' or target_entities_matched == '' }}"
          - condition: template
            # When trigger entity is "on".
            value_template: "{{ trigger_entities_matched != '' }}"
          - condition: template
            # When it's not blocked by blocker_entity.
            value_template: "{{ not blocker_entity or not states(blocker_entity) | regex_match('^('+ blocker_entity_state +')$', ignorecase=true) }}"
        sequence:
          - service: logbook.log
            # Add a logbook entry to indicate what triggered this action.
            data_template:
              name: "{{ state_attr(target_entity, 'friendly_name') or target_entity }}"
              message: "is executing service {{ target_entity_action_on }}"
          - service_template: "{{ target_entity_action_on }}"
            data_template:
              # This automation will be restarted immediately since the target_entity's state is now changed.
              entity_id: "{{ target_entity }}"
      - conditions:
          - condition: template
            # When target entity is "on".
            value_template: "{{ target_entity_state == '' or target_entities_matched != '' }}"
          - condition: template
            # When trigger entity is "off".
            value_template: "{{ (trigger_entity_state_off != '' and trigger_entities_off_matched != '') or (trigger_entity_state_off == '' and trigger_entities_matched == '') }}"
          - condition: template
            # When it's not blocked by timeout_blocker_entity.
            value_template: "{{ not timeout_blocker_entity or not states(timeout_blocker_entity) | regex_match('^('+ timeout_blocker_entity_state +')$', ignorecase=true) }}"
        sequence:
          # We don't need to do a "wait for trigger" action.
          # As we listen to any state change of the motion_sensor/target_entity,
          # if the motion_sensor is changed to 'on' during this delay, this automation will be restarted.
          - service: logbook.log
            # Add a logbook entry to indicate what triggered this action.
            data_template:
              name: "{{ state_attr(target_entity_off, 'friendly_name') or target_entity_off }}"
              message: >-
                  will execute service {{ target_entity_action_off }} after {{ trigger_timeout }}
                  {% set num_timeout = trigger_timeout | int(-1) %}
                  {% if num_timeout > 1 %}
                    seconds.
                  {% elif num_timeout >= 0 %}
                    second.
                  {% else %}
                    .
                  {% endif %}
              entity_id: "{{ target_entity_off }}"
          - delay: "{{ trigger_timeout }}"
          - service: logbook.log
            # Add a logbook entry to indicate what triggered this action.
            data_template:
              name: "{{ state_attr(target_entity_off, 'friendly_name') or target_entity_off }}"
              message: "is executing service {{ target_entity_action_off }}"
              entity_id: "{{ target_entity_off }}"
          - service_template: "{{ target_entity_action_off }}"
            data_template:
              entity_id: "{{ target_entity_off }}"
